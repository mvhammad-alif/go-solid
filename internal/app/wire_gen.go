// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/labstack/echo/v4"
	"go-solid/internal/config"
	"go-solid/internal/delivery"
	"go-solid/internal/repository/post"
	"go-solid/internal/tools"
	post2 "go-solid/internal/usecase/post"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func InitHTTPServer() (*echo.Echo, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	db, err := provideDatabase(configConfig)
	if err != nil {
		return nil, err
	}
	redisClient, err := provideRedisClient(configConfig)
	if err != nil {
		return nil, err
	}
	postRepository := post.NewRepository(db, redisClient)
	postUsecase := post2.NewUsecase(postRepository)
	postHandler := delivery.NewPostHandler(postUsecase)
	echoEcho := provideHTTPServer(postHandler)
	return echoEcho, nil
}

func InitCronService() (*tools.CronService, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	db, err := provideDatabase(configConfig)
	if err != nil {
		return nil, err
	}
	redisClient, err := provideRedisClient(configConfig)
	if err != nil {
		return nil, err
	}
	postRepository := post.NewRepository(db, redisClient)
	postUsecase := post2.NewUsecase(postRepository)
	cronHandler := delivery.NewCronHandler(postUsecase)
	v := provideCronJobs(cronHandler)
	cronService := tools.NewCronService(v)
	return cronService, nil
}
